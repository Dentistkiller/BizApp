@model BizApp.Models.Transaction
@using System.Globalization

@{
    ViewData["Title"] = "Edit Transaction";

    string Hex(byte[]? b) =>
        (b == null || b.Length == 0)
            ? "(none)"
            : BitConverter.ToString(b).Replace("-", "").ToLowerInvariant();

    string Short(string s, int n = 16) =>
        string.IsNullOrEmpty(s) ? "" : (s.Length <= n ? s : s.Substring(0, n) + "…");

    var devHex = Hex(Model?.device_id_hash);
    var ipHex = Hex(Model?.ip_hash);
}

<h1 class="mb-1">Edit Transaction</h1>
<p class="text-muted">Tx ID: <strong>@Model.tx_id</strong></p>
<hr />

<div class="row">
    <div class="col-lg-7">
        <form asp-action="Edit" method="post" id="editForm">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="tx_id" />

            <div class="mb-3">
                <label asp-for="customer_id" class="form-label">Customer</label>
                <select asp-for="customer_id" class="form-select" asp-items="ViewBag.customer_id"></select>
                <span asp-validation-for="customer_id" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="card_id" class="form-label">Card</label>
                <select asp-for="card_id" class="form-select" asp-items="ViewBag.card_id"></select>
                <span asp-validation-for="card_id" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="merchant_id" class="form-label">Merchant</label>
                <select asp-for="merchant_id" class="form-select" asp-items="ViewBag.merchant_id"></select>
                <span asp-validation-for="merchant_id" class="text-danger"></span>
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="amount" class="form-label">Amount</label>
                    <input asp-for="amount" class="form-control" inputmode="decimal" />
                    <span asp-validation-for="amount" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="currency" class="form-label">Currency</label>
                    <input asp-for="currency" class="form-control" />
                    <span asp-validation-for="currency" class="text-danger"></span>
                </div>
            </div>

            <div class="mb-1">
                <label asp-for="tx_utc" class="form-label">Time (UTC)</label>
                <input asp-for="tx_utc" class="form-control" id="txUtc" />
                <span class="form-text">Format: <code>yyyy-MM-dd HH:mm:ss</code></span>
                <span asp-validation-for="tx_utc" class="text-danger"></span>
            </div>

            <div class="d-flex gap-2 mb-3">
                <button type="button" class="btn btn-outline-secondary btn-sm" id="nowBtn">Use current time (UTC)</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" id="locBtn">Use my location</button>
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="entry_mode" class="form-label">Entry Mode</label>
                    <input asp-for="entry_mode" class="form-control" />
                    <span asp-validation-for="entry_mode" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="channel" class="form-label">Channel</label>
                    <input asp-for="channel" class="form-control" />
                    <span asp-validation-for="channel" class="text-danger"></span>
                </div>
            </div>

            <div class="row g-3 mt-1">
                <div class="col-md-6">
                    <label asp-for="lat" class="form-label">Latitude</label>
                    <input asp-for="lat" class="form-control" id="latInput" />
                    <span asp-validation-for="lat" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="lon" class="form-label">Longitude</label>
                    <input asp-for="lon" class="form-control" id="lonInput" />
                    <span asp-validation-for="lon" class="text-danger"></span>
                </div>
            </div>

            <div class="mt-3">
                <label asp-for="status" class="form-label">Status</label>
                <input asp-for="status" class="form-control" />
                <span asp-validation-for="status" class="text-danger"></span>
            </div>

            <div class="mt-4 d-flex gap-2">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-link">Back to List</a>
            </div>
        </form>
    </div>

    <div class="col-lg-5">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title mb-3">Device & Network</h5>

                <div class="mb-2">
                    <div class="text-muted small">Device ID Hash</div>
                    <code title="@devHex">@Short(devHex)</code>
                </div>

                <div>
                    <div class="text-muted small">IP Hash</div>
                    <code title="@ipHex">@Short(ipHex)</code>
                </div>

                <div class="text-muted small mt-3">
                    These hashes are stored as <code>VARBINARY</code> and are shown read-only here.
                    If you need to regenerate them from the browser, do it on the Create form or add a specialized action.
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        (function() {
            const txUtcEl = document.getElementById('txUtc');
            const latEl   = document.getElementById('latInput');
            const lonEl   = document.getElementById('lonInput');

            function pad(n){ return n<10 ? '0'+n : n; }
            function toUtcString(d){
                // yyyy-MM-dd HH:mm:ss in UTC
                return d.getUTCFullYear() + '-' + pad(d.getUTCMonth()+1) + '-' + pad(d.getUTCDate())
                    + ' ' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds());
            }

            document.getElementById('nowBtn')?.addEventListener('click', function(){
                txUtcEl.value = toUtcString(new Date());
            });

            document.getElementById('locBtn')?.addEventListener('click', function(){
                if (!navigator.geolocation) {
                    alert('Geolocation not supported by your browser.');
                    return;
                }
                navigator.geolocation.getCurrentPosition(function(pos){
                    latEl.value = pos.coords.latitude.toFixed(6);
                    lonEl.value = pos.coords.longitude.toFixed(6);
                }, function(err){
                    console.warn('Geolocation error', err);
                    alert('Could not get your location.');
                }, { enableHighAccuracy: true, timeout: 8000, maximumAge: 0 });
            });
        })();
    </script>
}
