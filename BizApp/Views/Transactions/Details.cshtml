@model BizApp.Controllers.TransactionDetailsVm

@{
    ViewData["Title"] = "Transaction Details";

    string Hex(byte[]? b) =>
        (b == null || b.Length == 0)
            ? "(none)"
            : BitConverter.ToString(b).Replace("-", "").ToLowerInvariant();

    string Short(string s, int n = 12) =>
        string.IsNullOrEmpty(s) ? "" : (s.Length <= n ? s : s.Substring(0, n) + "…");

    string RiskBadgeClass =
        Model.label_pred == true ? "bg-danger"
        : (Model.score.HasValue && Model.score.Value >= 0.5 ? "bg-warning text-dark"
        : "bg-secondary");
}

<h2 class="mb-1">Transaction <small class="text-muted">#@Model.Tx.tx_id</small></h2>
<p class="text-muted mb-4">Review details and label as fraud or legit.</p>

<div class="row g-3">
    <div class="col-lg-8">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <span class="badge @RiskBadgeClass me-2">
                        @(Model.label_pred == true ? "Flagged" : (Model.score >= 0.5 ? "Watch" : "Normal"))
                    </span>
                    <span class="text-muted">
                        Score: <strong>@(Model.score?.ToString("0.00") ?? "N/A")</strong>
                    </span>
                </div>

                <dl class="row mb-0">
                    <dt class="col-sm-3">Amount</dt>
                    <dd class="col-sm-9 fw-semibold">@Model.Tx.amount @Model.Tx.currency</dd>

                    <dt class="col-sm-3">Time (UTC)</dt>
                    <dd class="col-sm-9">@Model.Tx.tx_utc</dd>

                    <dt class="col-sm-3">Entry Mode</dt>
                    <dd class="col-sm-9">@Model.Tx.entry_mode</dd>

                    <dt class="col-sm-3">Channel</dt>
                    <dd class="col-sm-9">@Model.Tx.channel</dd>

                    <dt class="col-sm-3">Status</dt>
                    <dd class="col-sm-9">@Model.Tx.status</dd>

                    <dt class="col-sm-3">Customer</dt>
                    <dd class="col-sm-9">
                        @(Model.Tx.customer?.name ?? $"Customer {Model.Tx.customer_id}")
                        <small class="text-muted">(#@Model.Tx.customer_id)</small>
                    </dd>

                    <dt class="col-sm-3">Card</dt>
                    <dd class="col-sm-9">
                        @((Model.Tx.card?.network ?? "Card")) ••••@Model.Tx.card?.last4
                        <small class="text-muted">(ID #@Model.Tx.card_id)</small>
                    </dd>

                    <dt class="col-sm-3">Merchant</dt>
                    <dd class="col-sm-9">
                        @(Model.Tx.merchant?.name ?? $"Merchant {Model.Tx.merchant_id}")
                        <small class="text-muted">(#@Model.Tx.merchant_id)</small>
                    </dd>

                    <dt class="col-sm-3">Location</dt>
                    <dd class="col-sm-9">
                        @if (Model.Tx.lat.HasValue && Model.Tx.lon.HasValue)
                        {
                            <span>@Model.Tx.lat.Value.ToString("0.000000"), @Model.Tx.lon.Value.ToString("0.000000")</span>
                        }
                        else
                        {

                            <span class="text-muted">(none)</span>
                        }
                    </dd>

                    <dt class="col-sm-3">Device Hash</dt>
                    <dd class="col-sm-9">
                        @{
                            var devHex = Hex(Model.Tx.device_id_hash);
                        }
                        <code title="@devHex">@Short(devHex, 16)</code>
                    </dd>

                    <dt class="col-sm-3">IP Hash</dt>
                    <dd class="col-sm-9">
                        @{
                            var ipHex = Hex(Model.Tx.ip_hash);
                        }
                        <code title="@ipHex">@Short(ipHex, 16)</code>
                    </dd>
                </dl>
            </div>
        </div>

        <div class="card shadow-sm mt-3">
            <div class="card-body">
                <h5 class="card-title mb-3">Analyst Decision</h5>
                <form asp-action="Label" method="post" class="d-flex gap-2">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.Tx.tx_id" />
                    <button type="submit" name="fraud" value="true" class="btn btn-danger">
                        Mark Fraud
                    </button>
                    <button type="submit" name="fraud" value="false" class="btn btn-secondary">
                        Mark Legit
                    </button>
                </form>
                <small class="text-muted d-block mt-2">
                    Your decision immediately updates Labels and overrides the model’s prediction for this transaction.
                </small>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title mb-3">Model Explanation</h5>
                @if (!string.IsNullOrWhiteSpace(Model.reason_json))
                {
                    <pre class="bg-light p-3 rounded small mb-0">@Model.reason_json</pre>
                }
                else
                {
                    <div class="text-muted">No explanation available.</div>
                }
            </div>
        </div>
    </div>
</div>

<hr class="my-4" />

<div class="d-flex gap-2">
    <a asp-action="Edit" asp-route-id="@Model.Tx.tx_id" class="btn btn-outline-secondary">Edit</a>
    <a asp-action="Index" class="btn btn-link">Back to List</a>
</div>
